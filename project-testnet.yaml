specVersion: 1.0.0
name: subquery-network-subql-project
version: 1.0.0
runner:
  node:
    name: '@subql/node-ethereum'
    version: '*'
    options:
      unfinalizedBlocks: true
  query:
    name: '@subql/query'
    version: '*'
description: 'Query registry project for SubQuery Kepler Testnet'
repository: ''
schema:
  file: ./schema.graphql
network:
  chainId: '80001' # Mumbai testnet
  endpoint: https://rpc.ankr.com/polygon_mumbai
  dictionary: https://api.subquery.network/sq/subquery/polygon-mumbai-dictionary

x-ethereum: &ethereum
  kind: ethereum/Runtime
  startBlock: 39105221
  assets:
    eraManager:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/EraManager.sol/EraManager.json
    staking:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/Staking.sol/Staking.json
    sqtoken:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/SQToken.sol/SQToken.json
    indexerRegistry:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/IndexerRegistry.sol/IndexerRegistry.json
    queryRegistry:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/QueryRegistry.sol/QueryRegistry.json
    planManager:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/PlanManager.sol/PlanManager.json
    purchaseOfferMarket:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/PurchaseOfferMarket.sol/PurchaseOfferMarket.json
    serviceAgreementRegistry:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/ServiceAgreementRegistry.sol/ServiceAgreementRegistry.json
    rewardsDistributor:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/RewardsDistributer.sol/RewardsDistributer.json
    stateChannel:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/StateChannel.sol/StateChannel.json
    disputeManager:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/DisputeManager.sol/DisputeManager.json
    priceOracle:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/PriceOracle.sol/PriceOracle.json 
    airdropper:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/Airdropper.sol/Airdropper.json
    permissionedExchange:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/PermissionedExchange.sol/PermissionedExchange.json


dataSources:
  - <<: *ethereum
    options:
      abi: eraManager
      address: '0x33213826323D9231eE5f70bA2D961fF3d5691373'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleNewEra
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewEraStart(uint256 indexed era, address caller)
  - <<: *ethereum
    options:
      abi: indexerRegistry
      address: '0x56E2E7F534392a30e1916A867C8A1fd8781DD86C'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleRegisterIndexer
          kind: ethereum/LogHandler
          filter:
            topics:
              - RegisterIndexer(address indexed indexer, uint256 amount, bytes32 metadata)
        - handler: handleUpdateIndexerMetadata
          kind: ethereum/LogHandler
          filter:
            topics:
              - UpdateMetadata(address indexed indexer, bytes32 metadata)
        - handler: handleSetControllerAccount
          kind: ethereum/LogHandler
          filter:
            topics:
              - SetControllerAccount(address indexed indexer, address indexed controller)
        - handler: handleRemoveControllerAccount
          kind: ethereum/LogHandler
          filter:
            topics:
              - RemoveControllerAccount(address indexed indexer, address indexed controller)
        - handler: handleUnregisterIndexer
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnregisterIndexer(address indexed indexer)
        - handler: handleSetCommissionRate
          kind: ethereum/LogHandler
          filter:
            topics:
              - SetCommissionRate(address indexed indexer, uint256 amount)
        - handler: handleSetMinimumStakingAmount
          kind: ethereum/TransactionHandler
          filter:
            function: setminimumStakingAmount(uint256 amount)
  - <<: *ethereum
    options:
      abi: staking
      address: '0x967eAA8968AAA080b7Ab83E1e57ecaD53d2901E1'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleAddDelegation
          kind: ethereum/LogHandler
          filter:
            topics:
              - DelegationAdded(address indexed source, address indexed indexer, uint256 amount)
        - handler: handleRemoveDelegation
          kind: ethereum/LogHandler
          filter:
            topics:
              - DelegationRemoved(address indexed source, address indexed indexer, uint256 amount)
        - handler: handleWithdrawRequested
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnbondRequested(address indexed source, address indexed indexer, uint256 amount, uint256 index, uint8 _type)
        - handler: handleWithdrawClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnbondWithdrawn(address indexed source, uint256 amount, uint256 fee, uint256 index)
        - handler: handleWithdrawCancelled
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnbondCancelled(address indexed source, address indexed indexer, uint256 amount, uint256 index)
        - handler: handleSetIndexerLeverageLimit
          kind: ethereum/TransactionHandler
          filter:
            function: setIndexerLeverageLimit(uint256 _indexerLeverageLimit)
  - <<: *ethereum
    options:
      abi: sqtoken
      address: '0xed3bb617dbC128095f8b0A00B9498C2Ef5c3D04a'
    mapping:
      file: './dist/index.js'
      handlers:
        - handler: handleTransfer
          kind: ethereum/LogHandler
          filter:
            topics:
              - Transfer(address indexed from, address indexed to, uint256 amount)
  - <<: *ethereum
    options:
      abi: queryRegistry
      address: '0xabD5f22bBFcd48D913DFC0C1B6Cb08f38C8d2370'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleNewQuery
          kind: ethereum/LogHandler
          filter:
            topics:
              - CreateQuery(uint256 queryId, address creator, bytes32 metadata, bytes32 deploymentId, bytes32 version)
        - handler: handleUpdateQueryMetadata
          kind: ethereum/LogHandler
          filter:
            topics:
              - UpdateQueryMetadata(address owner, uint256 queryId, bytes32 metadata)
        - handler: handleUpdateQueryDeployment
          kind: ethereum/LogHandler
          filter:
            topics:
              - UpdateQueryDeployment(address owner, uint256 queryId, bytes32 deploymentId, bytes32 version)
        - handler: handleStartIndexing
          kind: ethereum/LogHandler
          filter:
            topics:
              - StartIndexing(address indexer, bytes32 deploymentId)
        - handler: handleIndexingUpdate
          kind: ethereum/LogHandler
          filter:
            topics:
              - UpdateDeploymentStatus(address indexer, bytes32 deploymentId, uint256 blockheight, bytes32 mmrRoot, uint256 timestamp)
        - handler: handleIndexingReady
          kind: ethereum/LogHandler
          filter:
            topics:
              - UpdateIndexingStatusToReady(address indexer, bytes32 deploymentId)
        - handler: handleStopIndexing
          kind: ethereum/LogHandler
          filter:
            topics:
              - StopIndexing(address indexer, bytes32 deploymentId)
  - <<: *ethereum
    options:
      abi: planManager
      address: '0xc0f525Fe59F6f1D4A201dB36f93F4D2F34d6C45D'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handlePlanTemplateCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanTemplateCreated(uint256 indexed planTemplateId)
        - handler: handlePlanTemplateMetadataUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanTemplateMetadataChanged(uint256 indexed planTemplateId, bytes32 metadata)
        - handler: handlePlanTemplateStatusUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanTemplateStatusChanged(uint256 indexed planTemplateId, bool active)
        - handler: handlePlanCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanCreated(uint256 indexed planId, address creator, bytes32 deploymentId, uint256 planTemplateId, uint256 price)
        - handler: handlePlanRemoved
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanRemoved(uint256 indexed planId)
  - <<: *ethereum
    options:
      abi: serviceAgreementRegistry
      address: '0x74442b8A032DFe381D276F3B1eAfE0D26833dACc'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleServiceAgreementCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - ClosedAgreementCreated(address indexed consumer, address indexed indexer, bytes32 indexed deploymentId, uint256 serviceAgreementId)
        - handler: handleUserAdded
          kind: ethereum/LogHandler
          filter:
            topics:
              - UserAdded(address indexed consumer, address user)
        - handler: handleUserRemoved
          kind: ethereum/LogHandler
          filter:
            topics:
              - UserRemoved(address indexed consumer, address user)
  - <<: *ethereum
    options:
      abi: rewardsDistributor
      address: '0x6a3Ea3abd16248dA4172A7da84c31c85FEfB35b2'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleRewardsDistributed
          kind: ethereum/LogHandler
          filter:
            topics:
              - DistributeRewards(address indexed indexer, uint256 indexed eraIdx, uint256 rewards, uint256 commission)
        - handler: handleRewardsClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - ClaimRewards(address indexed indexer, address indexed delegator, uint256 rewards)
        - handler: handleRewardsUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - RewardsChanged(address indexed indexer, uint256 indexed eraIdx, uint256 additions, uint256 removals)
  - <<: *ethereum
    options:
      abi: purchaseOfferMarket
      address: '0xB1360A9C92F129d744C72E0D2f10FDC4612e6dB9'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handlePurchaseOfferCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PurchaseOfferCreated(address consumer, uint256 offerId, bytes32 deploymentId, uint256 planTemplateId, uint256 deposit, uint16 limit, uint256 minimumAcceptHeight, uint256 expireDate)
        - handler: handlePurchaseOfferCancelled
          kind: ethereum/LogHandler
          filter:
            topics:
              - PurchaseOfferCancelled(address indexed creator, uint256 offerId, uint256 penalty)
        - handler: handlePurchaseOfferAccepted
          kind: ethereum/LogHandler
          filter:
            topics:
              - OfferAccepted(address indexed indexer, uint256 offerId, uint256 agreementId)
  - <<: *ethereum
    options:
      abi: stateChannel
      address: '0x1204fbF5513e85376E5C16fC353aCa12F7d7A09d'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleChannelOpen
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelOpen(uint256 indexed channelId, address indexer, address consumer, uint256 total, uint256 price, uint256 expiredAt, bytes32 deploymentId, bytes callback)
        - handler: handleChannelExtend
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelExtend(uint256 channelId, uint256 expiredAt)
        - handler: handleChannelFund
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelFund(uint256 channelId, uint256 total)
        - handler: handleChannelCheckpoint
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelCheckpoint(uint256 channelId, uint256 spent)
        - handler: handleChannelTerminate
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelTerminate(uint256 channelId, uint256 spent, uint256 terminatedAt, bool terminateByIndexer)
        - handler: handleChannelFinalize
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelFinalize(uint256 channelId, uint256 total, uint256 remain)
  - <<: *ethereum
    options:
      abi: disputeManager
      address: '0x1f32C28240384E2800AC3C28891713B763F1638B'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleDisputeOpen
          kind: ethereum/LogHandler
          filter:
            topics:
              - DisputeOpen(uint256 indexed disputeId, address fisherman, address indexer, uint8 _type)
        - handler: handleDisputeFinalized
          kind: ethereum/LogHandler
          filter:
            topics:
              - DisputeFinalized(uint256 indexed disputeId, uint8 state, uint256 slashAmount, uint256 returnAmount)
  - <<: *ethereum
    options:
      abi: priceOracle
      address: '0x03Bf8E450f8a85Cb0F3F7c0a9b2d72A3c74da924'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handlePricePosted
          kind: ethereum/LogHandler
          filter:
            topics:
              - PricePosted(address assetFrom, address assetTo, uint256 previousPrice, uint256 newPrice);
  - <<: *ethereum
    options:
      abi: airdropper
      address: '0x3342cF1D4a6d07D653B53969c960886439d53b25'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleRoundCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - RoundCreated(uint256 indexed roundId, address tokenAddress, uint256 roundStartTime, uint256 roundDeadline)
        - handler: handleAddAirdrop
          kind: ethereum/LogHandler
          filter:
            topics:
              - AddAirdrop(address indexed addr, uint256 roundId, uint256 amount)
        - handler: handleAirdropClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - AirdropClaimed(address indexed addr, uint256 roundId, uint256 amount)
        - handler: handleRoundSettled
          kind: ethereum/LogHandler
          filter:
            topics:
              - RoundSettled(uint256 indexed roundId, address settleDestination, uint256 unclaimAmount)
  - <<: *ethereum
    options:
      abi: permissionedExchange
      address: "0x2f6CcFEB92Df62c928c40f9535958426CE37C06D"
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleExchangeOrderSent
          kind: ethereum/LogHandler
          filter:
            topics:
              - ExchangeOrderSent(uint256 indexed orderId, address sender, address tokenGive, address tokenGet, uint256 amountGive, uint256 amountGet, uint256 expireDate)
        - handler: handleOrderChanged
          kind: ethereum/LogHandler
          filter:
            topics:
              - ExchangeOrderChanged(uint256 indexed orderId, uint256 tokenGiveBalance);
        - handler: handleTrade
          kind: ethereum/LogHandler
          filter:
            topics:
              - Trade(uint256 indexed orderId, address tokenGive, uint256 amountGive, address tokenGet, uint256 amountGet)
        - handler: handleOrderSettled
          kind: ethereum/LogHandler
          filter:
            topics:
              - OrderSettled(uint256 indexed orderId, address tokenGive, uint256 amountGive, address tokenGet, uint256 amountGet)
        - handler: handleQuotaAdded
          kind: ethereum/LogHandler
          filter:
            topics:
              - QuotaAdded(address token, address account, uint256 amount)
