specVersion: 1.0.0
name: subquery-network-subql-project
version: 1.0.0
runner:
  node:
    name: '@subql/node-ethereum'
    version: '>= 3.7.1'
    options:
      unfinalizedBlocks: true
  query:
    name: '@subql/query'
    version: '*'
description: 'Query registry project for SubQuery Testnet'
repository: ''
schema:
  file: ./schema.graphql
network:
  chainId: '84532' # base-sepolia
  endpoint: https://sepolia.base.org
  dictionary: ''

x-ethereum: &ethereum
  kind: ethereum/Runtime
  startBlock: 5073990

  assets:
    eraManager:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/l2/EraManager.sol/EraManager.json
    staking:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/Staking.sol/Staking.json
    sqtoken:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/l2/L2SQToken.sol/L2SQToken.json
    indexerRegistry:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/IndexerRegistry.sol/IndexerRegistry.json
    projectRegistry:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/ProjectRegistry.sol/ProjectRegistry.json
    planManager:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/PlanManager.sol/PlanManager.json
    purchaseOfferMarket:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/PurchaseOfferMarket.sol/PurchaseOfferMarket.json
    serviceAgreementRegistry:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/ServiceAgreementRegistry.sol/ServiceAgreementRegistry.json
    consumerRegistry:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/ConsumerRegistry.sol/ConsumerRegistry.json
    rewardsDistributor:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/RewardsDistributor.sol/RewardsDistributor.json
    stateChannel:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/StateChannel.sol/StateChannel.json
    disputeManager:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/DisputeManager.sol/DisputeManager.json
    priceOracle:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/PriceOracle.sol/PriceOracle.json
    tokenExchange:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/TokenExchange.sol/TokenExchange.json
    rewardsBooster:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/RewardsBooster.sol/RewardsBooster.json
    stakingAllocation:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/StakingAllocation.sol/StakingAllocation.json
    airdropper:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/Airdropper.sol/Airdropper.json

dataSources:
  - <<: *ethereum
    options:
      abi: eraManager
      address: '0x6E98e462c864Fa2D9Cc165bc4bf4fD891Fc2b8b2'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleNewEra
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewEraStart(uint256 indexed era, address caller)
  - <<: *ethereum
    options:
      abi: indexerRegistry
      address: '0x9b207b3ba85cE57c398d4ca07BA71a46C917EF1A'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleRegisterIndexer
          kind: ethereum/LogHandler
          filter:
            topics:
              - RegisterIndexer(address indexed indexer, uint256 amount, bytes32 metadata)
        - handler: handleUpdateIndexerMetadata
          kind: ethereum/LogHandler
          filter:
            topics:
              - UpdateMetadata(address indexed indexer, bytes32 metadata)
        - handler: handleSetControllerAccount
          kind: ethereum/LogHandler
          filter:
            topics:
              - SetControllerAccount(address indexed indexer, address indexed controller)
        - handler: handleUnregisterIndexer
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnregisterIndexer(address indexed indexer)
        - handler: handleSetCommissionRate
          kind: ethereum/LogHandler
          filter:
            topics:
              - SetCommissionRate(address indexed indexer, uint256 amount)
        - handler: handleSetMinimumStakingAmount
          kind: ethereum/TransactionHandler
          filter:
            function: setminimumStakingAmount(uint256 amount)
  - <<: *ethereum
    options:
      abi: staking
      address: '0x520c2A23000D134780a90bd9dec533df434140a2'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleAddDelegation
          kind: ethereum/LogHandler
          filter:
            topics:
              - DelegationAdded(address indexed source, address indexed runner, uint256 amount)
        - handler: handleRemoveDelegation
          kind: ethereum/LogHandler
          filter:
            topics:
              - DelegationRemoved(address indexed source, address indexed runner, uint256 amount)
        - handler: handleWithdrawRequested
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnbondRequested(address indexed source, address indexed runner, uint256 amount, uint256 index, uint8 _type)
        - handler: handleWithdrawClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnbondWithdrawn(address indexed source, uint256 amount, uint256 fee, uint256 index)
        - handler: handleWithdrawCancelled
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnbondCancelled(address indexed source, address indexed runner, uint256 amount, uint256 index)
        - handler: handleSetIndexerLeverageLimit
          kind: ethereum/TransactionHandler
          filter:
            function: setIndexerLeverageLimit(uint256 _indexerLeverageLimit)
  - <<: *ethereum
    options:
      abi: sqtoken
      address: '0x37B797EBE14B4490FE64c67390AeCfE20D650953'
    mapping:
      file: './dist/index.js'
      handlers:
        - handler: handleTransfer
          kind: ethereum/LogHandler
          filter:
            topics:
              - Transfer(address indexed from, address indexed to, uint256 amount)
  - <<: *ethereum
    options:
      abi: projectRegistry
      address: '0xaa5c9b4a3975FF78ffDd00321dAbce28EF7F7C7c'
    mapping:
      file: ./dist/index.js
      handlers:
        # latest version of events
        - handler: handleProjectCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - ProjectCreated(address indexed creator, uint256 indexed projectId, string projectMetadata, uint8 projectType, bytes32 deploymentId, bytes32 deploymentMetadata)
        - handler: handlerProjectTransferred
          kind: ethereum/LogHandler
          filter:
            topics:
              - Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
        - handler: handleProjectMetadataUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - ProjectMetadataUpdated(address indexed owner, uint256 indexed projectId, string metadata)
        - handler: handleProjectDeploymentUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - ProjectDeploymentUpdated(address indexed owner, uint256 indexed projectId, bytes32 deploymentId, bytes32 metadata)
        - handler: handleProjectLatestDeploymentUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - ProjectLatestDeploymentUpdated(address indexed owner, uint256 projectId, bytes32 deploymentId)
        - handler: handleServiceStatusChanged
          kind: ethereum/LogHandler
          filter:
            topics:
              - ServiceStatusChanged(address indexed indexer, bytes32 indexed deploymentId, uint8 status)
  - <<: *ethereum
    options:
      abi: planManager
      address: '0x61562768175432072cdD6C25De9ED74e24f1a458'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handlePlanTemplateCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanTemplateCreated(uint256 indexed planTemplateId)
        - handler: handlePlanTemplateMetadataUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanTemplateMetadataChanged(uint256 indexed planTemplateId, bytes32 metadata)
        - handler: handlePlanTemplateStatusUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanTemplateStatusChanged(uint256 indexed planTemplateId, bool active)
        - handler: handlePlanCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanCreated(uint256 indexed planId, address creator, bytes32 deploymentId, uint256 planTemplateId, uint256 price)
        - handler: handlePlanRemoved
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanRemoved(uint256 indexed planId)
  - <<: *ethereum
    options:
      abi: serviceAgreementRegistry
      address: '0x0E0730B1ec1D0E4C1AE15C73b0Be089d07261fBB'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleServiceAgreementCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - ClosedAgreementCreated(address indexed consumer, address indexed indexer, bytes32 indexed deploymentId, uint256 serviceAgreementId)
        - handler: handlerAgreementTransferred
          kind: ethereum/LogHandler
          filter:
            topics:
              - Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
  - <<: *ethereum
    options:
      abi: rewardsDistributor
      address: '0x5c0d1F22C4D7aaF35Ade34CA7c7491dBB0A91Cb7'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleRewardsDistributed
          kind: ethereum/LogHandler
          filter:
            topics:
              - DistributeRewards(address indexed runner, uint256 indexed eraIdx, uint256 rewards, uint256 commission)
        - handler: handleRewardsClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - ClaimRewards(address indexed runner, address indexed delegator, uint256 rewards)
        - handler: handleRewardsUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - RewardsChanged(address indexed runner, uint256 indexed eraIdx, uint256 additions, uint256 removals)
        - handler: handleInstantRewards
          kind: ethereum/LogHandler
          filter:
            topics:
              - InstantRewards(address indexed runner, uint256 indexed eraIdx, uint256 token)
        - handler: handleAgreementRewards
          kind: ethereum/LogHandler
          filter:
            topics:
              - AgreementRewards(address indexed runner, uint256 agreementId, uint256 token);
  - <<: *ethereum
    options:
      abi: purchaseOfferMarket
      address: '0x60060511d0dfC7B3a6013B7E565aeC8F353639a9'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handlePurchaseOfferCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PurchaseOfferCreated(address consumer, uint256 offerId, bytes32 deploymentId, uint256 planTemplateId, uint256 deposit, uint16 limit, uint256 minimumAcceptHeight, uint256 minimumStakingAmount, uint256 expireDate)
        - handler: handlePurchaseOfferCancelled
          kind: ethereum/LogHandler
          filter:
            topics:
              - PurchaseOfferCancelled(address indexed creator, uint256 offerId, uint256 penalty)
        - handler: handlePurchaseOfferAccepted
          kind: ethereum/LogHandler
          filter:
            topics:
              - OfferAccepted(address indexed indexer, uint256 offerId, uint256 agreementId)
  - <<: *ethereum
    options:
      abi: stateChannel
      address: '0x8C3d312291CC666757daFbb6eD20874Ae573C895'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleChannelOpen
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelOpen(uint256 indexed channelId, address indexer, address consumer, uint256 total, uint256 price, uint256 expiredAt, bytes32 deploymentId, bytes callback)
        - handler: handleChannelExtend
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelExtend(uint256 channelId, uint256 expiredAt)
        - handler: handleChannelFund
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelFund(uint256 indexed channelId, uint256 realTotal, uint256 total)
        - handler: handleChannelCheckpoint
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelCheckpoint(uint256 indexed channelId, uint256 spent, bool isFinal)
        - handler: handleChannelTerminate
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelTerminate(uint256 channelId, uint256 spent, uint256 terminatedAt, bool terminateByIndexer)
        - handler: handleChannelFinalize
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelFinalize(uint256 channelId, uint256 total, uint256 remain)
  - <<: *ethereum
    options:
      abi: disputeManager
      address: '0x7c244A53E57aaBEfF7Fb93745AA8993DB307788d'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleDisputeOpen
          kind: ethereum/LogHandler
          filter:
            topics:
              - DisputeOpen(uint256 indexed disputeId, address fisherman, address indexer, uint8 _type)
        - handler: handleDisputeFinalized
          kind: ethereum/LogHandler
          filter:
            topics:
              - DisputeFinalized(uint256 indexed disputeId, uint8 state, uint256 slashAmount, uint256 returnAmount)
  - <<: *ethereum
    options:
      abi: priceOracle
      address: '0x0D5A4266573975222292601686f2C3CF02E2120A'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handlePricePosted
          kind: ethereum/LogHandler
          filter:
            topics:
              - PricePosted(address assetFrom, address assetTo, uint256 previousPrice, uint256 newPrice);
  - <<: *ethereum
    options:
      abi: consumerRegistry
      address: '0x74C3c2273f47dDF4E435f20A01601a44a519a9c0'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleConsumerControllerAdded
          kind: ethereum/LogHandler
          filter:
            topics:
              - ControllerAdded(address indexed consumer, address controller)
        - handler: handleConsumerControllerRemoved
          kind: ethereum/LogHandler
          filter:
            topics:
              - ControllerRemoved(address indexed consumer, address controller)
  - <<: *ethereum
    options:
      abi: tokenExchange
      address: '0x91514003aDfb9371985cBEB59D10EdC784dec330'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleExchangeOrderSent
          kind: ethereum/LogHandler
          filter:
            topics:
              - ExchangeOrderSent(uint256 indexed orderId, address sender, address tokenGive, address tokenGet, uint256 amountGive, uint256 amountGet, uint256 tokenGiveBalance)
        - handler: handleOrderSettled
          kind: ethereum/LogHandler
          filter:
            topics:
              - OrderSettled(uint256 indexed orderId, address tokenGive, address tokenGet, uint256 amountGive)
        - handler: handleTraded
          kind: ethereum/LogHandler
          filter:
            topics:
              - Trade(uint256 indexed orderId, address tokenGive, address tokenGet, uint256 amountGive, uint256 amountGet);
  - <<: *ethereum
    options:
      abi: rewardsBooster
      address: '0x4f6A1045A56EeD1D2795b5f6F6713972B67C09C2'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleDeploymentBoosterAdded
          kind: ethereum/LogHandler
          filter:
            topics:
              - DeploymentBoosterAdded(bytes32 indexed deploymentId, address indexed account, uint256 amount)
        - handler: handleDeploymentBoosterRemoved
          kind: ethereum/LogHandler
          filter:
            topics:
              - DeploymentBoosterRemoved(bytes32 indexed deploymentId, address indexed account, uint256 amount)
        - handler: handleMissedLabor
          kind: ethereum/LogHandler
          filter:
            topics:
              - MissedLabor(bytes32 indexed deploymentId, address indexed runner, uint256 labor)
        - handler: handleAllocationRewardsGiven
          kind: ethereum/LogHandler
          filter:
            topics:
              - AllocationRewardsGiven(bytes32 indexed deploymentId, address indexed runner, uint256 amount)
        - handler: handleAllocationRewardsBurnt
          kind: ethereum/LogHandler
          filter:
            topics:
              - AllocationRewardsBurnt(bytes32 indexed deploymentId, address indexed runner, uint256 amount)
        - handler: handleQueryRewardsSpent
          kind: ethereum/LogHandler
          filter:
            topics:
              - QueryRewardsSpent(bytes32 indexed deploymentId, address indexed runner, uint256 amount, bytes data)
        - handler: handleQueryRewardsRefunded
          kind: ethereum/LogHandler
          filter:
            topics:
              - QueryRewardsRefunded(bytes32 indexed deploymentId, address indexed runner, uint256 amount, bytes data)
  - <<: *ethereum
    options:
      abi: stakingAllocation
      address: '0x505B8fD4331080e5130A21349E5438951D4d2e4a'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleStakeAllocationAdded
          kind: ethereum/LogHandler
          filter:
            topics:
              - StakeAllocationAdded(bytes32 deploymentId, address runner, uint256 amount)
        - handler: handleStakeAllocationRemoved
          kind: ethereum/LogHandler
          filter:
            topics:
              - StakeAllocationRemoved(bytes32 deploymentId, address runner, uint256 amount)
        - handler: handleOverAllocationStarted
          kind: ethereum/LogHandler
          filter:
            topics:
              - OverAllocationStarted(address runner, uint256 start)
        - handler: handleOverAllocationEnded
          kind: ethereum/LogHandler
          filter:
            topics:
              - OverAllocationEnded(address runner, uint256 end, uint256 time)

  - <<: *ethereum
    options:
      abi: airdropper
      address: '0x26B7e6B239e77eb13004CAdf7Ea3AeCB3A902586'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleRoundCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - RoundCreated(uint256 indexed roundId, address tokenAddress, uint256 roundStartTime, uint256 roundDeadline)
        - handler: handleAddAirdrop
          kind: ethereum/LogHandler
          filter:
            topics:
              - AddAirdrop(address indexed addr, uint256 roundId, uint256 amount)
        - handler: handleAirdropClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - AirdropClaimed(address indexed addr, uint256 roundId, uint256 amount)
        - handler: handleRoundSettled
          kind: ethereum/LogHandler
          filter:
            topics:
              - RoundSettled(uint256 indexed roundId, address settleDestination, uint256 unclaimAmount)
