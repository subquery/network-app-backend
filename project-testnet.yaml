specVersion: 1.0.0
name: subquery-network-subql-project
version: 1.0.0
runner:
  node:
    name: '@subql/node-ethereum'
    version: '>= 3.1.1'
    options:
      unfinalizedBlocks: true
  query:
    name: '@subql/query'
    version: '*'
description: 'Query registry project for SubQuery Kepler Testnet'
repository: ''
schema:
  file: ./schema.graphql
network:
  chainId: '80001' # Mumbai testnet
  endpoint: https://rpc.ankr.com/polygon_mumbai
  dictionary: https://dict-tyk.subquery.network/query/polygon-mumbai

x-ethereum: &ethereum
  kind: ethereum/Runtime
  startBlock: 43436676
  assets:
    eraManager:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/polygon/EraManager.sol/EraManager.json
    staking:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/Staking.sol/Staking.json
    sqtoken:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/polygon/ChildERC20.sol/ChildERC20.json
    indexerRegistry:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/IndexerRegistry.sol/IndexerRegistry.json
    projectRegistry:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/ProjectRegistry.sol/ProjectRegistry.json
    planManager:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/PlanManager.sol/PlanManager.json
    purchaseOfferMarket:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/PurchaseOfferMarket.sol/PurchaseOfferMarket.json
    serviceAgreementRegistry:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/ServiceAgreementRegistry.sol/ServiceAgreementRegistry.json
    consumerRegistry:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/ConsumerRegistry.sol/ConsumerRegistry.json
    rewardsDistributor:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/RewardsDistributer.sol/RewardsDistributer.json
    stateChannel:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/StateChannel.sol/StateChannel.json
    disputeManager:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/DisputeManager.sol/DisputeManager.json
    priceOracle:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/PriceOracle.sol/PriceOracle.json
    tokenExchange:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/TokenExchange.sol/TokenExchange.json

dataSources:
  - <<: *ethereum
    options:
      abi: eraManager
      address: '0xc193B6C752079CdE4020D8463cDAA62FAA09b253'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleNewEra
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewEraStart(uint256 indexed era, address caller)
  - <<: *ethereum
    options:
      abi: indexerRegistry
      address: '0x7f87DC86d4d31db2B28583BaFe6c63d62b6a7e7b'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleRegisterIndexer
          kind: ethereum/LogHandler
          filter:
            topics:
              - RegisterIndexer(address indexed indexer, uint256 amount, bytes32 metadata)
        - handler: handleUpdateIndexerMetadata
          kind: ethereum/LogHandler
          filter:
            topics:
              - UpdateMetadata(address indexed indexer, bytes32 metadata)
        - handler: handleSetControllerAccount
          kind: ethereum/LogHandler
          filter:
            topics:
              - SetControllerAccount(address indexed indexer, address indexed controller)
        - handler: handleRemoveControllerAccount
          kind: ethereum/LogHandler
          filter:
            topics:
              - RemoveControllerAccount(address indexed indexer, address indexed controller)
        - handler: handleUnregisterIndexer
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnregisterIndexer(address indexed indexer)
        - handler: handleSetCommissionRate
          kind: ethereum/LogHandler
          filter:
            topics:
              - SetCommissionRate(address indexed indexer, uint256 amount)
        - handler: handleSetMinimumStakingAmount
          kind: ethereum/TransactionHandler
          filter:
            function: setminimumStakingAmount(uint256 amount)
  - <<: *ethereum
    options:
      abi: staking
      address: '0x8E861d7CD5d66843A869a0316F401C2fd0d21692'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleAddDelegation
          kind: ethereum/LogHandler
          filter:
            topics:
              - DelegationAdded(address indexed source, address indexed indexer, uint256 amount)
        - handler: handleRemoveDelegation
          kind: ethereum/LogHandler
          filter:
            topics:
              - DelegationRemoved(address indexed source, address indexed indexer, uint256 amount)
        - handler: handleWithdrawRequested
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnbondRequested(address indexed source, address indexed indexer, uint256 amount, uint256 index, uint8 _type)
        - handler: handleWithdrawClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnbondWithdrawn(address indexed source, uint256 amount, uint256 fee, uint256 index)
        - handler: handleWithdrawCancelled
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnbondCancelled(address indexed source, address indexed indexer, uint256 amount, uint256 index)
        - handler: handleSetIndexerLeverageLimit
          kind: ethereum/TransactionHandler
          filter:
            function: setIndexerLeverageLimit(uint256 _indexerLeverageLimit)
  - <<: *ethereum
    options:
      abi: sqtoken
      address: '0xDa9f97B9dE8509938c65DB0F0CB0ff9Ea425E9a0'
    mapping:
      file: './dist/index.js'
      handlers:
        - handler: handleTransfer
          kind: ethereum/LogHandler
          filter:
            topics:
              - Transfer(address indexed from, address indexed to, uint256 amount)
  - <<: *ethereum
    options:
      abi: projectRegistry
      address: '0x984F8CBea62c54953BB3b9532841d774Dd04669b'
    mapping:
      file: ./dist/index.js
      handlers:
        # latest version of events
        - handler: handleProjectCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - ProjectCreated(address indexed creator, uint256 indexed projectId, string projectMetadata, uint8 projectType, bytes32 deploymentId, bytes32 deploymentMetadata)
        - handler: handlerProjectTransferred
          kind: ethereum/LogHandler
          filter:
            topics:
              - Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
        - handler: handleProjectMetadataUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - ProjectMetadataUpdated(address indexed owner, uint256 indexed projectId, string metadata)
        - handler: handleProjectDeploymentUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - ProjectDeploymentUpdated(address indexed owner, uint256 indexed projectId, bytes32 deploymentId, bytes32 metadata)
        - handler: handleProjectLatestDeploymentUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - ProjectLatestDeploymentUpdated(address indexed owner, uint256 projectId, bytes32 deploymentId)
        - handler: handleServiceStatusChanged
          kind: ethereum/LogHandler
          filter:
            topics:
              - ServiceStatusChanged(address indexed indexer, bytes32 indexed deploymentId, uint8 status)
  - <<: *ethereum
    options:
      abi: planManager
      address: '0x7369D48B2e47533A9Cd6C811f827Aac6202F0D17'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handlePlanTemplateCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanTemplateCreated(uint256 indexed planTemplateId)
        - handler: handlePlanTemplateMetadataUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanTemplateMetadataChanged(uint256 indexed planTemplateId, bytes32 metadata)
        - handler: handlePlanTemplateStatusUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanTemplateStatusChanged(uint256 indexed planTemplateId, bool active)
        - handler: handlePlanCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanCreated(uint256 indexed planId, address creator, bytes32 deploymentId, uint256 planTemplateId, uint256 price)
        - handler: handlePlanRemoved
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanRemoved(uint256 indexed planId)
  - <<: *ethereum
    options:
      abi: serviceAgreementRegistry
      address: '0xD218581F435643c25305C1c877431E15d6BbFC70'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleServiceAgreementCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - ClosedAgreementCreated(address indexed consumer, address indexed indexer, bytes32 indexed deploymentId, uint256 serviceAgreementId)
        - handler: handlerAgreementTransferred
          kind: ethereum/LogHandler
          filter:
            topics:
              - Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
  - <<: *ethereum
    options:
      abi: rewardsDistributor
      address: '0xbCa51C6Ccd9959466108A243F6c8Fd527A73Cb8d'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleRewardsDistributed
          kind: ethereum/LogHandler
          filter:
            topics:
              - DistributeRewards(address indexed indexer, uint256 indexed eraIdx, uint256 rewards, uint256 commission)
        - handler: handleRewardsClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - ClaimRewards(address indexed indexer, address indexed delegator, uint256 rewards)
        - handler: handleRewardsUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - RewardsChanged(address indexed indexer, uint256 indexed eraIdx, uint256 additions, uint256 removals)
  - <<: *ethereum
    options:
      abi: purchaseOfferMarket
      address: '0x87c9C7a2672f31EbA5dB31CfF105eCbF2591eF12'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handlePurchaseOfferCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PurchaseOfferCreated(address consumer, uint256 offerId, bytes32 deploymentId, uint256 planTemplateId, uint256 deposit, uint16 limit, uint256 minimumAcceptHeight, uint256 minimumStakingAmount, uint256 expireDate)
        - handler: handlePurchaseOfferCancelled
          kind: ethereum/LogHandler
          filter:
            topics:
              - PurchaseOfferCancelled(address indexed creator, uint256 offerId, uint256 penalty)
        - handler: handlePurchaseOfferAccepted
          kind: ethereum/LogHandler
          filter:
            topics:
              - OfferAccepted(address indexed indexer, uint256 offerId, uint256 agreementId)
  - <<: *ethereum
    options:
      abi: stateChannel
      address: '0x4BCd439E0cE238a48BeCCee236Fe402A676Cdea9'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleChannelOpen
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelOpen(uint256 indexed channelId, address indexer, address consumer, uint256 total, uint256 price, uint256 expiredAt, bytes32 deploymentId, bytes callback)
        - handler: handleChannelExtend
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelExtend(uint256 channelId, uint256 expiredAt)
        - handler: handleChannelFund
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelFund(uint256 channelId, uint256 total)
        - handler: handleChannelCheckpoint
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelCheckpoint(uint256 channelId, uint256 spent)
        - handler: handleChannelTerminate
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelTerminate(uint256 channelId, uint256 spent, uint256 terminatedAt, bool terminateByIndexer)
        - handler: handleChannelFinalize
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelFinalize(uint256 channelId, uint256 total, uint256 remain)
  - <<: *ethereum
    options:
      abi: disputeManager
      address: '0x60988c4475BaB7B0f99335FBeCAA6716176dF114'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleDisputeOpen
          kind: ethereum/LogHandler
          filter:
            topics:
              - DisputeOpen(uint256 indexed disputeId, address fisherman, address indexer, uint8 _type)
        - handler: handleDisputeFinalized
          kind: ethereum/LogHandler
          filter:
            topics:
              - DisputeFinalized(uint256 indexed disputeId, uint8 state, uint256 slashAmount, uint256 returnAmount)
  - <<: *ethereum
    options:
      abi: priceOracle
      address: '0xaB9189822844b90eE0A99F33512c2Aa3927232a4'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handlePricePosted
          kind: ethereum/LogHandler
          filter:
            topics:
              - PricePosted(address assetFrom, address assetTo, uint256 previousPrice, uint256 newPrice);
  - <<: *ethereum
    options:
      abi: consumerRegistry
      address: "0x6E0FaE74E83f524b228752a304348Fbe4a29De10"
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleConsumerControllerAdded
          kind: ethereum/LogHandler
          filter:
            topics:
              - ControllerAdded(address indexed consumer, address controller)
        - handler: handleConsumerControllerRemoved
          kind: ethereum/LogHandler
          filter:
            topics:
              - ControllerRemoved(address indexed consumer, address controller)
  - <<: *ethereum
    options:
      abi: tokenExchange
      address: "0xE3699a98fBeFeE61AF1F1F695A437d9fF9dd211c"
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleExchangeOrderSent
          kind: ethereum/LogHandler
          filter:
            topics:
              - ExchangeOrderSent(uint256 indexed orderId, address sender, address tokenGive, address tokenGet, uint256 amountGive, uint256 amountGet, uint256 tokenGiveBalance)
        - handler: handleOrderSettled
          kind: ethereum/LogHandler
          filter:
            topics:
              - OrderSettled(uint256 indexed orderId, address tokenGive, address tokenGet, uint256 amountGive)
        - handler: handleTraded
          kind: ethereum/LogHandler
          filter:
            topics:
              - Trade(uint256 indexed orderId, address tokenGive, address tokenGet, uint256 amountGive, uint256 amountGet);

