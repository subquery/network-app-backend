specVersion: 1.0.0
name: subquery-network-subql-project
version: 1.0.0
runner:
  node:
    name: '@subql/node-ethereum'
    version: '*'
  query:
    name: '@subql/query'
    version: '*'
description: 'Query registry project for SubQuery Kepler Testnet'
repository: ''
schema:
  file: ./schema.graphql
network:
  chainId: '80001' # Mumbai testnet 
  endpoint: 'https://polygon-mumbai.g.alchemy.com/v2/olBcbaUN-00iYo-4VDlJYbkpCmj5rLY0'
  dictionary: 'https://mumbai-dict-cr.api.onfinality.io'

x-ethereum: &ethereum
  kind: ethereum/Runtime 
  startBlock: 32558017
  assets:
    eraManager:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/EraManager.sol/EraManager.json
    staking:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/Staking.sol/Staking.json
    indexerRegistry:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/IndexerRegistry.sol/IndexerRegistry.json
    queryRegistry:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/QueryRegistry.sol/QueryRegistry.json
    planManager:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/PlanManager.sol/PlanManager.json
    purchaseOfferMarket:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/PurchaseOfferMarket.sol/PurchaseOfferMarket.json
    serviceAgreementRegistry:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/ServiceAgreementRegistry.sol/ServiceAgreementRegistry.json
    rewardsDistributor:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/RewardsDistributer.sol/RewardsDistributer.json
    stateChannel:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/StateChannel.sol/StateChannel.json
    disputeManager:
      file: ./node_modules/@subql/contract-sdk/artifacts/contracts/DisputeManager.sol/DisputeManager.json

dataSources:
  - <<: *ethereum
    options:
      abi: eraManager
      address: '0xf3074BB5cEeEbA127f1FAb7fca4D1cB96c7b8a83'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleNewEra
          kind: ethereum/LogHandler
          filter:
            topics:
              - NewEraStart(uint256 indexed era, address caller)
  - <<: *ethereum
    options:
      abi: indexerRegistry
      address: '0x44Aa8c01069d4E46Bc6a0B9aa7B3c5dD39685a02'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleRegisterIndexer
          kind: ethereum/LogHandler
          filter:
            topics:
              - RegisterIndexer(address indexed indexer, uint256 amount, bytes32 metadata)
        - handler: handleUpdateIndexerMetadata
          kind: ethereum/LogHandler
          filter:
            topics:
              - UpdateMetadata(address indexed indexer, bytes32 metadata)
        - handler: handleSetControllerAccount
          kind: ethereum/LogHandler
          filter:
            topics:
              - SetControllerAccount(address indexed indexer, address indexed controller)
        - handler: handleRemoveControllerAccount
          kind: ethereum/LogHandler
          filter:
            topics:
              - RemoveControllerAccount(address indexed indexer, address indexed controller)
        - handler: handleUnregisterIndexer
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnregisterIndexer(address indexed indexer)
        - handler: handleSetCommissionRate
          kind: ethereum/LogHandler
          filter:
            topics:
              - SetCommissionRate(address indexed indexer, uint256 amount)
  - <<: *ethereum
    options:
      abi: staking
      address: '0x2aE12984595740119e4eBaDf3F52a524C45A14a2'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleAddDelegation
          kind: ethereum/LogHandler
          filter:
            topics:
              - DelegationAdded(address indexed source, address indexed indexer, uint256 amount)
        - handler: handleRemoveDelegation
          kind: ethereum/LogHandler
          filter:
            topics:
              - DelegationRemoved(address indexed source, address indexed indexer, uint256 amount)
        - handler: handleWithdrawRequested
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnbondRequested(address indexed source, address indexed indexer, uint256 amount, uint256 index, uint8 _type)
        - handler: handleWithdrawClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnbondWithdrawn(address indexed source, uint256 amount, uint256 index)
        - handler: handleWithdrawCancelled
          kind: ethereum/LogHandler
          filter:
            topics:
              - UnbondCancelled(address indexed source, address indexed indexer, uint256 amount, uint256 index)
  - <<: *ethereum
    options:
      abi: queryRegistry
      address: '0x0336B65E43518c9f574EAfA135409De9153A5F83'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleNewQuery
          kind: ethereum/LogHandler
          filter:
            topics:
              - CreateQuery(uint256 queryId, address creator, bytes32 metadata, bytes32 deploymentId, bytes32 version)
        - handler: handleUpdateQueryMetadata
          kind: ethereum/LogHandler
          filter:
            topics:
              - UpdateQueryMetadata(address owner, uint256 queryId, bytes32 metadata)
        - handler: handleUpdateQueryDeployment
          kind: ethereum/LogHandler
          filter:
            topics:
              - UpdateQueryDeployment(address owner, uint256 queryId, bytes32 deploymentId, bytes32 version)
        - handler: handleStartIndexing
          kind: ethereum/LogHandler
          filter:
            topics:
              - StartIndexing(address indexer, bytes32 deploymentId)
        - handler: handleIndexingUpdate
          kind: ethereum/LogHandler
          filter:
            topics:
              - UpdateDeploymentStatus(address indexer, bytes32 deploymentId, uint256 blockheight, bytes32 mmrRoot, uint256 timestamp)
        - handler: handleIndexingReady
          kind: ethereum/LogHandler
          filter:
            topics:
              - UpdateIndexingStatusToReady(address indexer, bytes32 deploymentId)
        - handler: handleStopIndexing
          kind: ethereum/LogHandler
          filter:
            topics:
              - StopIndexing(address indexer, bytes32 deploymentId)
  - <<: *ethereum
    options:
      abi: planManager
      address: '0x774137D151CD267fC3C8dE70A53c75cEcFC4BD5C'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handlePlanTemplateCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanTemplateCreated(uint256 indexed planTemplateId)
        - handler: handlePlanTemplateMetadataUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanTemplateMetadataChanged(uint256 indexed planTemplateId, bytes32 metadata)
        - handler: handlePlanTemplateStatusUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanTemplateStatusChanged(uint256 indexed planTemplateId, bool active)
        - handler: handlePlanCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanCreated(uint256 indexed planId, address creator, bytes32 deploymentId, uint256 planTemplateId, uint256 price)
        - handler: handlePlanRemoved
          kind: ethereum/LogHandler
          filter:
            topics:
              - PlanRemoved(uint256 indexed planId)
  - <<: *ethereum
    options:
      abi: serviceAgreementRegistry
      address: '0xd056C50A78185FCA6DaA3166C842FF018dBaF21d'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleServiceAgreementCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - ClosedAgreementCreated(address indexed consumer, address indexed indexer, bytes32 indexed deploymentId, uint256 serviceAgreementId)
        - handler: handleUserAdded
          kind: ethereum/LogHandler
          filter:
            topics:
              - UserAdded(address indexed consumer, address user)
        - handler: handleUserRemoved
          kind: ethereum/LogHandler
          filter:
            topics:
              - UserRemoved(address indexed consumer, address user)
  - <<: *ethereum
    options:  
      abi: rewardsDistributor
      address: '0x43F3e4003d62a18D52000Ff54a9B6a232a329553'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleRewardsDistributed
          kind: ethereum/LogHandler
          filter:
            topics:
              - DistributeRewards(address indexed indexer, uint256 indexed eraIdx, uint256 rewards)
        - handler: handleRewardsClaimed
          kind: ethereum/LogHandler
          filter:
            topics:
              - ClaimRewards(address indexed indexer, address indexed delegator, uint256 rewards)
        - handler: handleRewardsUpdated
          kind: ethereum/LogHandler
          filter:
            topics:
              - RewardsChanged(address indexed indexer, uint256 indexed eraIdx, uint256 additions, uint256 removals)
  - <<: *ethereum
    options:
      abi: purchaseOfferMarket
      address: '0x7482002918bF86655055F1AE3aa465c2B1A9CB2C'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handlePurchaseOfferCreated
          kind: ethereum/LogHandler
          filter:
            topics:
              - PurchaseOfferCreated(address consumer, uint256 offerId, bytes32 deploymentId, uint256 planTemplateId, uint256 deposit, uint16 limit, uint256 minimumAcceptHeight, uint256 expireDate)
        - handler: handlePurchaseOfferCancelled
          kind: ethereum/LogHandler
          filter:
            topics:
              - PurchaseOfferCancelled(address indexed creator, uint256 offerId, uint256 penalty)
        - handler: handlePurchaseOfferAccepted
          kind: ethereum/LogHandler
          filter:
            topics:
              - OfferAccepted(address indexed indexer, uint256 offerId, uint256 agreementId)
  - <<: *ethereum
    options:
      abi: stateChannel
      address: '0xa95Ed099d97C93A4Da3677aD54bd298CeB5527a1'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleChannelOpen
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelOpen(uint256 indexed channelId, address indexer, address consumer, uint256 total, uint256 price, uint256 expiredAt, bytes32 deploymentId, bytes callback)
        - handler: handleChannelExtend
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelExtend(uint256 channelId, uint256 expiredAt)
        - handler: handleChannelFund
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelFund(uint256 channelId, uint256 total)
        - handler: handleChannelCheckpoint
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelCheckpoint(uint256 channelId, uint256 spent)
        - handler: handleChannelTerminate
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelTerminate(uint256 channelId, uint256 spent, uint256 terminatedAt, bool terminateByIndexer)
        - handler: handleChannelFinalize
          kind: ethereum/LogHandler
          filter:
            topics:
              - ChannelFinalize(uint256 channelId, uint256 total, uint256 remain)
  - <<: *ethereum
    options:
      abi: disputeManager
      address: '0xCD3D4102154695131B883EaEb821439a2fF2A1c9'
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleDisputeOpen
          kind: ethereum/LogHandler
          filter:
            topics:
              - DisputeOpen(uint256 indexed disputeId, address fisherman, address indexer, uint8 _type)
        - handler: handleDisputeFinalized
          kind: ethereum/LogHandler
          filter:
            topics:
              - DisputeFinalized(uint256 indexed disputeId, uint8 state, uint256 slashAmount, uint256 returnAmount)
